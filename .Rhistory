beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
F<-1
while(F==1){
f<-1
k<-0
while(f==1){
k<-k+1
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu0<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu0==name[i]),]~X[which(mu0==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
}
print(beta)
lambdamu<-rbind(lambdamu,data.frame(lambda=lambda,mu=round(mu,1),shape=1:(n)))
print("dong")
beta.total[i,]<-t(beta)
print("lll")
BIC<-c(BIC,log(sum((y-X%*%beta-round(mu))^2)/n) +  log(log(n+2))*log(n)*sum(as.numeric(table(round(mu)))[which( as.numeric(table(round(mu)))<0.1*n)])/n)
}
return(list(beta=beta.total,lambdamu=lambdamu,BIC=BIC))
}
subgroup(y,X,lam)
subgroup<-function(y,X,lam){
n<-length(y)
p<-ncol(X)
B <- matrix(0, nrow = n*(n-1)/2, ncol = n)
for (i in 1:(n-1)) {
for (j in (i+1):n) {
B[(2*n-i)*(i-1)/2+j-i,i]<-1
B[(2*n-i)*(i-1)/2+j-i,j]<--1
}
}
x<-solve(t(X)%*%X)%*%t(X)
delta<-1e-5
gamma<-2
lambdamu<-data.frame()
BIC<-vector()
beta.total<-vector()
for (i in 1:(length(lam))) {
lambda<-lam[i]
beta0<-matrix(lm(y~X)$coefficient[2:(p+1)], nrow = p, ncol = 1)
mu0<-matrix(lm(y~X)$coefficient[1], nrow = n, ncol = 1)
w<-rep(1,n*(n-1)/2)
f<-1
while(f==1){
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu==name[i]),]~X[which(mu==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
F<-1
while(F==1){
f<-1
k<-0
while(f==1){
k<-k+1
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu0<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu0==name[i]),]~X[which(mu0==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
}
print(beta)
lambdamu<-rbind(lambdamu,data.frame(lambda=lambda,mu=round(mu,1),shape=1:(n)))
print("dong")
beta.total<-rbind(beta.total,beta)
print("lll")
BIC<-c(BIC,log(sum((y-X%*%beta-round(mu))^2)/n) +  log(log(n+2))*log(n)*sum(as.numeric(table(round(mu)))[which( as.numeric(table(round(mu)))<0.1*n)])/n)
}
return(list(beta=beta.total,lambdamu=lambdamu,BIC=BIC))
}
subgroup(y,X,lam)
subgroup<-function(y,X,lam){
n<-length(y)
p<-ncol(X)
B <- matrix(0, nrow = n*(n-1)/2, ncol = n)
for (i in 1:(n-1)) {
for (j in (i+1):n) {
B[(2*n-i)*(i-1)/2+j-i,i]<-1
B[(2*n-i)*(i-1)/2+j-i,j]<--1
}
}
x<-solve(t(X)%*%X)%*%t(X)
delta<-1e-5
gamma<-2
mu.total<-vector()
BIC<-vector()
beta.total<-vector()
for (i in 1:(length(lam))) {
lambda<-lam[i]
beta0<-matrix(lm(y~X)$coefficient[2:(p+1)], nrow = p, ncol = 1)
mu0<-matrix(lm(y~X)$coefficient[1], nrow = n, ncol = 1)
w<-rep(1,n*(n-1)/2)
f<-1
while(f==1){
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu==name[i]),]~X[which(mu==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
F<-1
while(F==1){
f<-1
k<-0
while(f==1){
k<-k+1
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu0<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu0==name[i]),]~X[which(mu0==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
}
print(beta)
print("dong")
beta.total<-rbind(beta.total,beta)
mu.total<-rbind(mu.total,round(mu,1))
print("lll")
BIC<-c(BIC,log(sum((y-X%*%beta-round(mu))^2)/n) +  log(log(n+2))*log(n)*sum(as.numeric(table(round(mu)))[which( as.numeric(table(round(mu)))<0.1*n)])/n)
}
return(list(beta=beta.total,lambdamu=lambdamu,BIC=BIC))
}
subgroup(y,X,lam)
subgroup<-function(y,X,lam){
n<-length(y)
p<-ncol(X)
B <- matrix(0, nrow = n*(n-1)/2, ncol = n)
for (i in 1:(n-1)) {
for (j in (i+1):n) {
B[(2*n-i)*(i-1)/2+j-i,i]<-1
B[(2*n-i)*(i-1)/2+j-i,j]<--1
}
}
x<-solve(t(X)%*%X)%*%t(X)
delta<-1e-5
gamma<-2
mu.total<-vector()
BIC<-vector()
beta.total<-vector()
for (i in 1:(length(lam))) {
lambda<-lam[i]
beta0<-matrix(lm(y~X)$coefficient[2:(p+1)], nrow = p, ncol = 1)
mu0<-matrix(lm(y~X)$coefficient[1], nrow = n, ncol = 1)
w<-rep(1,n*(n-1)/2)
f<-1
while(f==1){
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu==name[i]),]~X[which(mu==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
F<-1
while(F==1){
f<-1
k<-0
while(f==1){
k<-k+1
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu0<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu0==name[i]),]~X[which(mu0==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
}
print(beta)
print("dong")
beta.total<-rbind(beta.total,beta)
mu.total<-rbind(mu.total,round(mu,1))
print("lll")
BIC<-c(BIC,log(sum((y-X%*%beta-round(mu))^2)/n) +  log(log(n+2))*log(n)*sum(as.numeric(table(round(mu)))[which( as.numeric(table(round(mu)))<0.1*n)])/n)
}
return(list(beta=beta.total,mu=mu.total,BIC=BIC))
}
subgroup(y,X,lam)
subgroup<-function(y,X,lam){
n<-length(y)
p<-ncol(X)
B <- matrix(0, nrow = n*(n-1)/2, ncol = n)
for (i in 1:(n-1)) {
for (j in (i+1):n) {
B[(2*n-i)*(i-1)/2+j-i,i]<-1
B[(2*n-i)*(i-1)/2+j-i,j]<--1
}
}
x<-solve(t(X)%*%X)%*%t(X)
delta<-1e-5
gamma<-2
mu.total<-vector()
BIC<-vector()
beta.total<-vector()
for (i in 1:(length(lam))) {
lambda<-lam[i]
beta0<-matrix(lm(y~X)$coefficient[2:(p+1)], nrow = p, ncol = 1)
mu0<-matrix(lm(y~X)$coefficient[1], nrow = n, ncol = 1)
w<-rep(1,n*(n-1)/2)
f<-1
while(f==1){
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu==name[i]),]~X[which(mu==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
F<-1
while(F==1){
f<-1
k<-0
while(f==1){
k<-k+1
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu0<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu0==name[i]),]~X[which(mu0==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
}
print(beta)
print("dong")
beta.total<-rbind(beta.total,beta)
mu.total<-cbind(mu.total,round(mu,1))
print("lll")
BIC<-c(BIC,log(sum((y-X%*%beta-round(mu))^2)/n) +  log(log(n+2))*log(n)*sum(as.numeric(table(round(mu)))[which( as.numeric(table(round(mu)))<0.1*n)])/n)
}
return(list(beta=beta.total,mu=mu.total,BIC=BIC))
}
subgroup(y,X,lam)
lam
lam<-c(0.01,0.02,0.03,0.04)
subgroup(y,X,lam)
n<-100
library(MASS)
y<-matrix(0,ncol=1,nrow=n)
X<-mvrnorm(n,rep(0,2),diag(2))
beta<-matrix(c(3,2), nrow = 2, ncol = 1)
y<-X%*%beta+rnorm(n,0,1)
y[1:50,]<-y[1:50,]+rep(-3,50)
y[51:100]<-y[51:100]+rep(3,50)
lam<-c(0.005,0.01,0.015,0.02)
sub(y,X,lam)
subgroup(y,X,lam)
lam<-c(0.001,0.003,0.005,0.007)
subgroup(y,X,lam)
subgroup<-function(y,X,lam){
n<-length(y)
p<-ncol(X)
B <- matrix(0, nrow = n*(n-1)/2, ncol = n)
for (i in 1:(n-1)) {
for (j in (i+1):n) {
B[(2*n-i)*(i-1)/2+j-i,i]<-1
B[(2*n-i)*(i-1)/2+j-i,j]<--1
}
}
x<-solve(t(X)%*%X)%*%t(X)
delta<-1e-5
gamma<-2
mu.total<-vector()
BIC<-vector()
beta.total<-vector()
for (i in 1:(length(lam))) {
lambda<-lam[i]
beta0<-matrix(lm(y~X)$coefficient[2:(p+1)], nrow = p, ncol = 1)
mu0<-matrix(lm(y~X)$coefficient[1], nrow = n, ncol = 1)
w<-rep(1,n*(n-1)/2)
f<-1
while(f==1){
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu==name[i]),]~X[which(mu==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
F<-1
while(F==1){
f<-1
k<-0
while(f==1){
k<-k+1
mu<-solve(lambda*t(B)%*%diag(w)%*%B+diag(n))%*%(y-X%*%beta0)
if(sum((mu-mu0)^2)<10-5) f<-0
mu0<-mu
Bmu<-B%*%mu
for(i in 1:(n*(n-1)/2)){
if(Bmu[i,1]<=delta) w[i]=delta^(-2)*exp(-2*log(1+abs(Bmu[i,1]/delta)^gamma)/gamma)
else w[i]=abs(Bmu[i,1])^(-2)*exp(-2*log(1+abs(delta/Bmu[i,1])^gamma)/gamma)
}
}
t<-table(round(mu))
c<-which(as.numeric(t)>=0.05*n)
mu0<-round(mu)
name<-as.numeric(names(t))
beta.group<-matrix(0,nrow=length(which(as.numeric(t)>=0.05*n)),ncol=p)
for(i in c){
beta.group[which(c==i),]<-lm(y[which(mu0==name[i]),]~X[which(mu0==name[i]),])$coefficient[-1]
}
beta.group[is.na(beta.group)]<-0
beta<-colSums( beta.group*as.numeric(t)[which(as.numeric(t)>=0.05*n)])/sum(as.numeric(t)[which(as.numeric(t)>=0.05*n)])
if(sum((beta-beta0)^2)<10e-5) F<-0
beta0<-beta
}
beta.total<-rbind(beta.total,beta)
mu.total<-cbind(mu.total,round(mu,1))
BIC<-c(BIC,log(sum((y-X%*%beta-round(mu))^2)/n) +  log(log(n+2))*log(n)*sum(as.numeric(table(round(mu)))[which( as.numeric(table(round(mu)))<0.1*n)])/n)
}
return(list(beta=beta.total,mu=mu.total,BIC=BIC))
}
subgroup(y,X,lam)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtll
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
library(Ball)
library(Ball)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('F:/StatComp21084/StatComp21084_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
library(MASS)
install.packages("MASS")
install.packages("MASS")
